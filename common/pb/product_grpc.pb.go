// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: product.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductService_CreateItemVariant_FullMethodName      = "/pb.ProductService/CreateItemVariant"
	ProductService_CreateItemAddon_FullMethodName        = "/pb.ProductService/CreateItemAddon"
	ProductService_CreateRestaurantMenu_FullMethodName   = "/pb.ProductService/CreateRestaurantMenu"
	ProductService_CreateMenuItem_FullMethodName         = "/pb.ProductService/CreateMenuItem"
	ProductService_CreateRetailCategory_FullMethodName   = "/pb.ProductService/CreateRetailCategory"
	ProductService_CreateRetailItem_FullMethodName       = "/pb.ProductService/CreateRetailItem"
	ProductService_CreateMedicineCategory_FullMethodName = "/pb.ProductService/CreateMedicineCategory"
	ProductService_CreateMedicineItem_FullMethodName     = "/pb.ProductService/CreateMedicineItem"
	ProductService_GetItemVariant_FullMethodName         = "/pb.ProductService/GetItemVariant"
	ProductService_GetItemAddon_FullMethodName           = "/pb.ProductService/GetItemAddon"
	ProductService_GetRestaurantMenu_FullMethodName      = "/pb.ProductService/GetRestaurantMenu"
	ProductService_GetMenuItem_FullMethodName            = "/pb.ProductService/GetMenuItem"
	ProductService_GetRetailCategory_FullMethodName      = "/pb.ProductService/GetRetailCategory"
	ProductService_GetRetailItem_FullMethodName          = "/pb.ProductService/GetRetailItem"
	ProductService_GetMedicineCategory_FullMethodName    = "/pb.ProductService/GetMedicineCategory"
	ProductService_GetMedicineItem_FullMethodName        = "/pb.ProductService/GetMedicineItem"
	ProductService_ListItemVariant_FullMethodName        = "/pb.ProductService/ListItemVariant"
	ProductService_ListItemAddon_FullMethodName          = "/pb.ProductService/ListItemAddon"
	ProductService_ListRestaurantMenu_FullMethodName     = "/pb.ProductService/ListRestaurantMenu"
	ProductService_ListMenuItem_FullMethodName           = "/pb.ProductService/ListMenuItem"
	ProductService_ListRetailCategory_FullMethodName     = "/pb.ProductService/ListRetailCategory"
	ProductService_ListRetailItem_FullMethodName         = "/pb.ProductService/ListRetailItem"
	ProductService_ListMedicineCategory_FullMethodName   = "/pb.ProductService/ListMedicineCategory"
	ProductService_ListMedicineItem_FullMethodName       = "/pb.ProductService/ListMedicineItem"
	ProductService_UpdateItemVariant_FullMethodName      = "/pb.ProductService/UpdateItemVariant"
	ProductService_UpdateItemAddon_FullMethodName        = "/pb.ProductService/UpdateItemAddon"
	ProductService_UpdateRestaurantMenu_FullMethodName   = "/pb.ProductService/UpdateRestaurantMenu"
	ProductService_UpdateMenuItem_FullMethodName         = "/pb.ProductService/UpdateMenuItem"
	ProductService_UpdateRetailCategory_FullMethodName   = "/pb.ProductService/UpdateRetailCategory"
	ProductService_UpdateRetailItem_FullMethodName       = "/pb.ProductService/UpdateRetailItem"
	ProductService_UpdateMedicineCategory_FullMethodName = "/pb.ProductService/UpdateMedicineCategory"
	ProductService_UpdateMedicineItem_FullMethodName     = "/pb.ProductService/UpdateMedicineItem"
	ProductService_DeleteItemVariant_FullMethodName      = "/pb.ProductService/DeleteItemVariant"
	ProductService_DeleteItemAddon_FullMethodName        = "/pb.ProductService/DeleteItemAddon"
	ProductService_DeleteRestaurantMenu_FullMethodName   = "/pb.ProductService/DeleteRestaurantMenu"
	ProductService_DeleteMenuItem_FullMethodName         = "/pb.ProductService/DeleteMenuItem"
	ProductService_DeleteRetailCategory_FullMethodName   = "/pb.ProductService/DeleteRetailCategory"
	ProductService_DeleteRetailItem_FullMethodName       = "/pb.ProductService/DeleteRetailItem"
	ProductService_DeleteMedicineCategory_FullMethodName = "/pb.ProductService/DeleteMedicineCategory"
	ProductService_DeleteMedicineItem_FullMethodName     = "/pb.ProductService/DeleteMedicineItem"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	CreateItemVariant(ctx context.Context, in *CreateItemVariantReq, opts ...grpc.CallOption) (*ItemVariant, error)
	CreateItemAddon(ctx context.Context, in *CreateItemAddonReq, opts ...grpc.CallOption) (*ItemAddon, error)
	CreateRestaurantMenu(ctx context.Context, in *CreateRestaurantMenuReq, opts ...grpc.CallOption) (*RestaurantMenu, error)
	CreateMenuItem(ctx context.Context, in *CreateMenuItemReq, opts ...grpc.CallOption) (*MenuItem, error)
	CreateRetailCategory(ctx context.Context, in *CreateRetailCategoryReq, opts ...grpc.CallOption) (*RetailCategory, error)
	CreateRetailItem(ctx context.Context, in *CreateRetailItemReq, opts ...grpc.CallOption) (*RetailItem, error)
	CreateMedicineCategory(ctx context.Context, in *CreateMedicineCategoryReq, opts ...grpc.CallOption) (*MedicineCategory, error)
	CreateMedicineItem(ctx context.Context, in *CreateMedicineItemReq, opts ...grpc.CallOption) (*MedicineItem, error)
	GetItemVariant(ctx context.Context, in *GetItemVariantReq, opts ...grpc.CallOption) (*ItemVariant, error)
	GetItemAddon(ctx context.Context, in *GetItemAddonReq, opts ...grpc.CallOption) (*ItemAddon, error)
	GetRestaurantMenu(ctx context.Context, in *GetRestaurantMenuReq, opts ...grpc.CallOption) (*RestaurantMenu, error)
	GetMenuItem(ctx context.Context, in *GetMenuItemReq, opts ...grpc.CallOption) (*MenuItem, error)
	GetRetailCategory(ctx context.Context, in *GetRetailCategoryReq, opts ...grpc.CallOption) (*RetailCategory, error)
	GetRetailItem(ctx context.Context, in *GetRetailItemReq, opts ...grpc.CallOption) (*RetailItem, error)
	GetMedicineCategory(ctx context.Context, in *GetMedicineCategoryReq, opts ...grpc.CallOption) (*MedicineCategory, error)
	GetMedicineItem(ctx context.Context, in *GetMedicineItemReq, opts ...grpc.CallOption) (*MedicineItem, error)
	ListItemVariant(ctx context.Context, in *ListItemVariantReq, opts ...grpc.CallOption) (*ListItemVariantRes, error)
	ListItemAddon(ctx context.Context, in *ListItemAddonReq, opts ...grpc.CallOption) (*ListItemAddonRes, error)
	ListRestaurantMenu(ctx context.Context, in *ListRestaurantMenuReq, opts ...grpc.CallOption) (*ListRestaurantMenuRes, error)
	ListMenuItem(ctx context.Context, in *ListMenuItemReq, opts ...grpc.CallOption) (*ListMenuItemRes, error)
	ListRetailCategory(ctx context.Context, in *ListRetailCategoryReq, opts ...grpc.CallOption) (*ListRetailCategoryRes, error)
	ListRetailItem(ctx context.Context, in *ListRetailItemReq, opts ...grpc.CallOption) (*ListRetailItemRes, error)
	ListMedicineCategory(ctx context.Context, in *ListMedicineCategoryReq, opts ...grpc.CallOption) (*ListMedicineCategoryRes, error)
	ListMedicineItem(ctx context.Context, in *ListMedicineItemReq, opts ...grpc.CallOption) (*ListMedicineItemRes, error)
	UpdateItemVariant(ctx context.Context, in *UpdateItemVariantReq, opts ...grpc.CallOption) (*EmptyRes, error)
	UpdateItemAddon(ctx context.Context, in *UpdateItemAddonReq, opts ...grpc.CallOption) (*EmptyRes, error)
	UpdateRestaurantMenu(ctx context.Context, in *UpdateRestaurantMenuReq, opts ...grpc.CallOption) (*EmptyRes, error)
	UpdateMenuItem(ctx context.Context, in *UpdateMenuItemReq, opts ...grpc.CallOption) (*EmptyRes, error)
	UpdateRetailCategory(ctx context.Context, in *UpdateRetailCategoryReq, opts ...grpc.CallOption) (*EmptyRes, error)
	UpdateRetailItem(ctx context.Context, in *UpdateRetailItemReq, opts ...grpc.CallOption) (*EmptyRes, error)
	UpdateMedicineCategory(ctx context.Context, in *UpdateMedicineCategoryReq, opts ...grpc.CallOption) (*EmptyRes, error)
	UpdateMedicineItem(ctx context.Context, in *UpdateMedicineItemReq, opts ...grpc.CallOption) (*EmptyRes, error)
	DeleteItemVariant(ctx context.Context, in *DeleteItemVariantReq, opts ...grpc.CallOption) (*EmptyRes, error)
	DeleteItemAddon(ctx context.Context, in *DeleteItemAddonReq, opts ...grpc.CallOption) (*EmptyRes, error)
	DeleteRestaurantMenu(ctx context.Context, in *DeleteRestaurantMenuReq, opts ...grpc.CallOption) (*EmptyRes, error)
	DeleteMenuItem(ctx context.Context, in *DeleteMenuItemReq, opts ...grpc.CallOption) (*EmptyRes, error)
	DeleteRetailCategory(ctx context.Context, in *DeleteRetailCategoryReq, opts ...grpc.CallOption) (*EmptyRes, error)
	DeleteRetailItem(ctx context.Context, in *DeleteRetailItemReq, opts ...grpc.CallOption) (*EmptyRes, error)
	DeleteMedicineCategory(ctx context.Context, in *DeleteMedicineCategoryReq, opts ...grpc.CallOption) (*EmptyRes, error)
	DeleteMedicineItem(ctx context.Context, in *DeleteMedicineItemReq, opts ...grpc.CallOption) (*EmptyRes, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) CreateItemVariant(ctx context.Context, in *CreateItemVariantReq, opts ...grpc.CallOption) (*ItemVariant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemVariant)
	err := c.cc.Invoke(ctx, ProductService_CreateItemVariant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateItemAddon(ctx context.Context, in *CreateItemAddonReq, opts ...grpc.CallOption) (*ItemAddon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemAddon)
	err := c.cc.Invoke(ctx, ProductService_CreateItemAddon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateRestaurantMenu(ctx context.Context, in *CreateRestaurantMenuReq, opts ...grpc.CallOption) (*RestaurantMenu, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestaurantMenu)
	err := c.cc.Invoke(ctx, ProductService_CreateRestaurantMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateMenuItem(ctx context.Context, in *CreateMenuItemReq, opts ...grpc.CallOption) (*MenuItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MenuItem)
	err := c.cc.Invoke(ctx, ProductService_CreateMenuItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateRetailCategory(ctx context.Context, in *CreateRetailCategoryReq, opts ...grpc.CallOption) (*RetailCategory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetailCategory)
	err := c.cc.Invoke(ctx, ProductService_CreateRetailCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateRetailItem(ctx context.Context, in *CreateRetailItemReq, opts ...grpc.CallOption) (*RetailItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetailItem)
	err := c.cc.Invoke(ctx, ProductService_CreateRetailItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateMedicineCategory(ctx context.Context, in *CreateMedicineCategoryReq, opts ...grpc.CallOption) (*MedicineCategory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MedicineCategory)
	err := c.cc.Invoke(ctx, ProductService_CreateMedicineCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateMedicineItem(ctx context.Context, in *CreateMedicineItemReq, opts ...grpc.CallOption) (*MedicineItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MedicineItem)
	err := c.cc.Invoke(ctx, ProductService_CreateMedicineItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetItemVariant(ctx context.Context, in *GetItemVariantReq, opts ...grpc.CallOption) (*ItemVariant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemVariant)
	err := c.cc.Invoke(ctx, ProductService_GetItemVariant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetItemAddon(ctx context.Context, in *GetItemAddonReq, opts ...grpc.CallOption) (*ItemAddon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemAddon)
	err := c.cc.Invoke(ctx, ProductService_GetItemAddon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetRestaurantMenu(ctx context.Context, in *GetRestaurantMenuReq, opts ...grpc.CallOption) (*RestaurantMenu, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestaurantMenu)
	err := c.cc.Invoke(ctx, ProductService_GetRestaurantMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetMenuItem(ctx context.Context, in *GetMenuItemReq, opts ...grpc.CallOption) (*MenuItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MenuItem)
	err := c.cc.Invoke(ctx, ProductService_GetMenuItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetRetailCategory(ctx context.Context, in *GetRetailCategoryReq, opts ...grpc.CallOption) (*RetailCategory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetailCategory)
	err := c.cc.Invoke(ctx, ProductService_GetRetailCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetRetailItem(ctx context.Context, in *GetRetailItemReq, opts ...grpc.CallOption) (*RetailItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetailItem)
	err := c.cc.Invoke(ctx, ProductService_GetRetailItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetMedicineCategory(ctx context.Context, in *GetMedicineCategoryReq, opts ...grpc.CallOption) (*MedicineCategory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MedicineCategory)
	err := c.cc.Invoke(ctx, ProductService_GetMedicineCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetMedicineItem(ctx context.Context, in *GetMedicineItemReq, opts ...grpc.CallOption) (*MedicineItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MedicineItem)
	err := c.cc.Invoke(ctx, ProductService_GetMedicineItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListItemVariant(ctx context.Context, in *ListItemVariantReq, opts ...grpc.CallOption) (*ListItemVariantRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListItemVariantRes)
	err := c.cc.Invoke(ctx, ProductService_ListItemVariant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListItemAddon(ctx context.Context, in *ListItemAddonReq, opts ...grpc.CallOption) (*ListItemAddonRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListItemAddonRes)
	err := c.cc.Invoke(ctx, ProductService_ListItemAddon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListRestaurantMenu(ctx context.Context, in *ListRestaurantMenuReq, opts ...grpc.CallOption) (*ListRestaurantMenuRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRestaurantMenuRes)
	err := c.cc.Invoke(ctx, ProductService_ListRestaurantMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListMenuItem(ctx context.Context, in *ListMenuItemReq, opts ...grpc.CallOption) (*ListMenuItemRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMenuItemRes)
	err := c.cc.Invoke(ctx, ProductService_ListMenuItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListRetailCategory(ctx context.Context, in *ListRetailCategoryReq, opts ...grpc.CallOption) (*ListRetailCategoryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRetailCategoryRes)
	err := c.cc.Invoke(ctx, ProductService_ListRetailCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListRetailItem(ctx context.Context, in *ListRetailItemReq, opts ...grpc.CallOption) (*ListRetailItemRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRetailItemRes)
	err := c.cc.Invoke(ctx, ProductService_ListRetailItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListMedicineCategory(ctx context.Context, in *ListMedicineCategoryReq, opts ...grpc.CallOption) (*ListMedicineCategoryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMedicineCategoryRes)
	err := c.cc.Invoke(ctx, ProductService_ListMedicineCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListMedicineItem(ctx context.Context, in *ListMedicineItemReq, opts ...grpc.CallOption) (*ListMedicineItemRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMedicineItemRes)
	err := c.cc.Invoke(ctx, ProductService_ListMedicineItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateItemVariant(ctx context.Context, in *UpdateItemVariantReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, ProductService_UpdateItemVariant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateItemAddon(ctx context.Context, in *UpdateItemAddonReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, ProductService_UpdateItemAddon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateRestaurantMenu(ctx context.Context, in *UpdateRestaurantMenuReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, ProductService_UpdateRestaurantMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateMenuItem(ctx context.Context, in *UpdateMenuItemReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, ProductService_UpdateMenuItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateRetailCategory(ctx context.Context, in *UpdateRetailCategoryReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, ProductService_UpdateRetailCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateRetailItem(ctx context.Context, in *UpdateRetailItemReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, ProductService_UpdateRetailItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateMedicineCategory(ctx context.Context, in *UpdateMedicineCategoryReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, ProductService_UpdateMedicineCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateMedicineItem(ctx context.Context, in *UpdateMedicineItemReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, ProductService_UpdateMedicineItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteItemVariant(ctx context.Context, in *DeleteItemVariantReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, ProductService_DeleteItemVariant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteItemAddon(ctx context.Context, in *DeleteItemAddonReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, ProductService_DeleteItemAddon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteRestaurantMenu(ctx context.Context, in *DeleteRestaurantMenuReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, ProductService_DeleteRestaurantMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteMenuItem(ctx context.Context, in *DeleteMenuItemReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, ProductService_DeleteMenuItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteRetailCategory(ctx context.Context, in *DeleteRetailCategoryReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, ProductService_DeleteRetailCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteRetailItem(ctx context.Context, in *DeleteRetailItemReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, ProductService_DeleteRetailItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteMedicineCategory(ctx context.Context, in *DeleteMedicineCategoryReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, ProductService_DeleteMedicineCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteMedicineItem(ctx context.Context, in *DeleteMedicineItemReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, ProductService_DeleteMedicineItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility.
type ProductServiceServer interface {
	CreateItemVariant(context.Context, *CreateItemVariantReq) (*ItemVariant, error)
	CreateItemAddon(context.Context, *CreateItemAddonReq) (*ItemAddon, error)
	CreateRestaurantMenu(context.Context, *CreateRestaurantMenuReq) (*RestaurantMenu, error)
	CreateMenuItem(context.Context, *CreateMenuItemReq) (*MenuItem, error)
	CreateRetailCategory(context.Context, *CreateRetailCategoryReq) (*RetailCategory, error)
	CreateRetailItem(context.Context, *CreateRetailItemReq) (*RetailItem, error)
	CreateMedicineCategory(context.Context, *CreateMedicineCategoryReq) (*MedicineCategory, error)
	CreateMedicineItem(context.Context, *CreateMedicineItemReq) (*MedicineItem, error)
	GetItemVariant(context.Context, *GetItemVariantReq) (*ItemVariant, error)
	GetItemAddon(context.Context, *GetItemAddonReq) (*ItemAddon, error)
	GetRestaurantMenu(context.Context, *GetRestaurantMenuReq) (*RestaurantMenu, error)
	GetMenuItem(context.Context, *GetMenuItemReq) (*MenuItem, error)
	GetRetailCategory(context.Context, *GetRetailCategoryReq) (*RetailCategory, error)
	GetRetailItem(context.Context, *GetRetailItemReq) (*RetailItem, error)
	GetMedicineCategory(context.Context, *GetMedicineCategoryReq) (*MedicineCategory, error)
	GetMedicineItem(context.Context, *GetMedicineItemReq) (*MedicineItem, error)
	ListItemVariant(context.Context, *ListItemVariantReq) (*ListItemVariantRes, error)
	ListItemAddon(context.Context, *ListItemAddonReq) (*ListItemAddonRes, error)
	ListRestaurantMenu(context.Context, *ListRestaurantMenuReq) (*ListRestaurantMenuRes, error)
	ListMenuItem(context.Context, *ListMenuItemReq) (*ListMenuItemRes, error)
	ListRetailCategory(context.Context, *ListRetailCategoryReq) (*ListRetailCategoryRes, error)
	ListRetailItem(context.Context, *ListRetailItemReq) (*ListRetailItemRes, error)
	ListMedicineCategory(context.Context, *ListMedicineCategoryReq) (*ListMedicineCategoryRes, error)
	ListMedicineItem(context.Context, *ListMedicineItemReq) (*ListMedicineItemRes, error)
	UpdateItemVariant(context.Context, *UpdateItemVariantReq) (*EmptyRes, error)
	UpdateItemAddon(context.Context, *UpdateItemAddonReq) (*EmptyRes, error)
	UpdateRestaurantMenu(context.Context, *UpdateRestaurantMenuReq) (*EmptyRes, error)
	UpdateMenuItem(context.Context, *UpdateMenuItemReq) (*EmptyRes, error)
	UpdateRetailCategory(context.Context, *UpdateRetailCategoryReq) (*EmptyRes, error)
	UpdateRetailItem(context.Context, *UpdateRetailItemReq) (*EmptyRes, error)
	UpdateMedicineCategory(context.Context, *UpdateMedicineCategoryReq) (*EmptyRes, error)
	UpdateMedicineItem(context.Context, *UpdateMedicineItemReq) (*EmptyRes, error)
	DeleteItemVariant(context.Context, *DeleteItemVariantReq) (*EmptyRes, error)
	DeleteItemAddon(context.Context, *DeleteItemAddonReq) (*EmptyRes, error)
	DeleteRestaurantMenu(context.Context, *DeleteRestaurantMenuReq) (*EmptyRes, error)
	DeleteMenuItem(context.Context, *DeleteMenuItemReq) (*EmptyRes, error)
	DeleteRetailCategory(context.Context, *DeleteRetailCategoryReq) (*EmptyRes, error)
	DeleteRetailItem(context.Context, *DeleteRetailItemReq) (*EmptyRes, error)
	DeleteMedicineCategory(context.Context, *DeleteMedicineCategoryReq) (*EmptyRes, error)
	DeleteMedicineItem(context.Context, *DeleteMedicineItemReq) (*EmptyRes, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductServiceServer struct{}

func (UnimplementedProductServiceServer) CreateItemVariant(context.Context, *CreateItemVariantReq) (*ItemVariant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemVariant not implemented")
}
func (UnimplementedProductServiceServer) CreateItemAddon(context.Context, *CreateItemAddonReq) (*ItemAddon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemAddon not implemented")
}
func (UnimplementedProductServiceServer) CreateRestaurantMenu(context.Context, *CreateRestaurantMenuReq) (*RestaurantMenu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRestaurantMenu not implemented")
}
func (UnimplementedProductServiceServer) CreateMenuItem(context.Context, *CreateMenuItemReq) (*MenuItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenuItem not implemented")
}
func (UnimplementedProductServiceServer) CreateRetailCategory(context.Context, *CreateRetailCategoryReq) (*RetailCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRetailCategory not implemented")
}
func (UnimplementedProductServiceServer) CreateRetailItem(context.Context, *CreateRetailItemReq) (*RetailItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRetailItem not implemented")
}
func (UnimplementedProductServiceServer) CreateMedicineCategory(context.Context, *CreateMedicineCategoryReq) (*MedicineCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedicineCategory not implemented")
}
func (UnimplementedProductServiceServer) CreateMedicineItem(context.Context, *CreateMedicineItemReq) (*MedicineItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedicineItem not implemented")
}
func (UnimplementedProductServiceServer) GetItemVariant(context.Context, *GetItemVariantReq) (*ItemVariant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemVariant not implemented")
}
func (UnimplementedProductServiceServer) GetItemAddon(context.Context, *GetItemAddonReq) (*ItemAddon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemAddon not implemented")
}
func (UnimplementedProductServiceServer) GetRestaurantMenu(context.Context, *GetRestaurantMenuReq) (*RestaurantMenu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurantMenu not implemented")
}
func (UnimplementedProductServiceServer) GetMenuItem(context.Context, *GetMenuItemReq) (*MenuItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuItem not implemented")
}
func (UnimplementedProductServiceServer) GetRetailCategory(context.Context, *GetRetailCategoryReq) (*RetailCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetailCategory not implemented")
}
func (UnimplementedProductServiceServer) GetRetailItem(context.Context, *GetRetailItemReq) (*RetailItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetailItem not implemented")
}
func (UnimplementedProductServiceServer) GetMedicineCategory(context.Context, *GetMedicineCategoryReq) (*MedicineCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicineCategory not implemented")
}
func (UnimplementedProductServiceServer) GetMedicineItem(context.Context, *GetMedicineItemReq) (*MedicineItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicineItem not implemented")
}
func (UnimplementedProductServiceServer) ListItemVariant(context.Context, *ListItemVariantReq) (*ListItemVariantRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItemVariant not implemented")
}
func (UnimplementedProductServiceServer) ListItemAddon(context.Context, *ListItemAddonReq) (*ListItemAddonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItemAddon not implemented")
}
func (UnimplementedProductServiceServer) ListRestaurantMenu(context.Context, *ListRestaurantMenuReq) (*ListRestaurantMenuRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRestaurantMenu not implemented")
}
func (UnimplementedProductServiceServer) ListMenuItem(context.Context, *ListMenuItemReq) (*ListMenuItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMenuItem not implemented")
}
func (UnimplementedProductServiceServer) ListRetailCategory(context.Context, *ListRetailCategoryReq) (*ListRetailCategoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRetailCategory not implemented")
}
func (UnimplementedProductServiceServer) ListRetailItem(context.Context, *ListRetailItemReq) (*ListRetailItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRetailItem not implemented")
}
func (UnimplementedProductServiceServer) ListMedicineCategory(context.Context, *ListMedicineCategoryReq) (*ListMedicineCategoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicineCategory not implemented")
}
func (UnimplementedProductServiceServer) ListMedicineItem(context.Context, *ListMedicineItemReq) (*ListMedicineItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicineItem not implemented")
}
func (UnimplementedProductServiceServer) UpdateItemVariant(context.Context, *UpdateItemVariantReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItemVariant not implemented")
}
func (UnimplementedProductServiceServer) UpdateItemAddon(context.Context, *UpdateItemAddonReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItemAddon not implemented")
}
func (UnimplementedProductServiceServer) UpdateRestaurantMenu(context.Context, *UpdateRestaurantMenuReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRestaurantMenu not implemented")
}
func (UnimplementedProductServiceServer) UpdateMenuItem(context.Context, *UpdateMenuItemReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenuItem not implemented")
}
func (UnimplementedProductServiceServer) UpdateRetailCategory(context.Context, *UpdateRetailCategoryReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRetailCategory not implemented")
}
func (UnimplementedProductServiceServer) UpdateRetailItem(context.Context, *UpdateRetailItemReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRetailItem not implemented")
}
func (UnimplementedProductServiceServer) UpdateMedicineCategory(context.Context, *UpdateMedicineCategoryReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicineCategory not implemented")
}
func (UnimplementedProductServiceServer) UpdateMedicineItem(context.Context, *UpdateMedicineItemReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicineItem not implemented")
}
func (UnimplementedProductServiceServer) DeleteItemVariant(context.Context, *DeleteItemVariantReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItemVariant not implemented")
}
func (UnimplementedProductServiceServer) DeleteItemAddon(context.Context, *DeleteItemAddonReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItemAddon not implemented")
}
func (UnimplementedProductServiceServer) DeleteRestaurantMenu(context.Context, *DeleteRestaurantMenuReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRestaurantMenu not implemented")
}
func (UnimplementedProductServiceServer) DeleteMenuItem(context.Context, *DeleteMenuItemReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenuItem not implemented")
}
func (UnimplementedProductServiceServer) DeleteRetailCategory(context.Context, *DeleteRetailCategoryReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRetailCategory not implemented")
}
func (UnimplementedProductServiceServer) DeleteRetailItem(context.Context, *DeleteRetailItemReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRetailItem not implemented")
}
func (UnimplementedProductServiceServer) DeleteMedicineCategory(context.Context, *DeleteMedicineCategoryReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedicineCategory not implemented")
}
func (UnimplementedProductServiceServer) DeleteMedicineItem(context.Context, *DeleteMedicineItemReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedicineItem not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}
func (UnimplementedProductServiceServer) testEmbeddedByValue()                        {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_CreateItemVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemVariantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateItemVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateItemVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateItemVariant(ctx, req.(*CreateItemVariantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateItemAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemAddonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateItemAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateItemAddon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateItemAddon(ctx, req.(*CreateItemAddonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateRestaurantMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRestaurantMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateRestaurantMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateRestaurantMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateRestaurantMenu(ctx, req.(*CreateRestaurantMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateMenuItem(ctx, req.(*CreateMenuItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateRetailCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRetailCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateRetailCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateRetailCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateRetailCategory(ctx, req.(*CreateRetailCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateRetailItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRetailItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateRetailItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateRetailItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateRetailItem(ctx, req.(*CreateRetailItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateMedicineCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMedicineCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateMedicineCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateMedicineCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateMedicineCategory(ctx, req.(*CreateMedicineCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateMedicineItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMedicineItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateMedicineItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateMedicineItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateMedicineItem(ctx, req.(*CreateMedicineItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetItemVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemVariantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetItemVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetItemVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetItemVariant(ctx, req.(*GetItemVariantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetItemAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemAddonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetItemAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetItemAddon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetItemAddon(ctx, req.(*GetItemAddonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetRestaurantMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRestaurantMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetRestaurantMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetRestaurantMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetRestaurantMenu(ctx, req.(*GetRestaurantMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetMenuItem(ctx, req.(*GetMenuItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetRetailCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRetailCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetRetailCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetRetailCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetRetailCategory(ctx, req.(*GetRetailCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetRetailItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRetailItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetRetailItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetRetailItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetRetailItem(ctx, req.(*GetRetailItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetMedicineCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedicineCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetMedicineCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetMedicineCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetMedicineCategory(ctx, req.(*GetMedicineCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetMedicineItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedicineItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetMedicineItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetMedicineItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetMedicineItem(ctx, req.(*GetMedicineItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListItemVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemVariantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListItemVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListItemVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListItemVariant(ctx, req.(*ListItemVariantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListItemAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemAddonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListItemAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListItemAddon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListItemAddon(ctx, req.(*ListItemAddonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListRestaurantMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRestaurantMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListRestaurantMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListRestaurantMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListRestaurantMenu(ctx, req.(*ListRestaurantMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMenuItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListMenuItem(ctx, req.(*ListMenuItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListRetailCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRetailCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListRetailCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListRetailCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListRetailCategory(ctx, req.(*ListRetailCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListRetailItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRetailItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListRetailItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListRetailItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListRetailItem(ctx, req.(*ListRetailItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListMedicineCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMedicineCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListMedicineCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListMedicineCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListMedicineCategory(ctx, req.(*ListMedicineCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListMedicineItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMedicineItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListMedicineItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListMedicineItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListMedicineItem(ctx, req.(*ListMedicineItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateItemVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemVariantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateItemVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateItemVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateItemVariant(ctx, req.(*UpdateItemVariantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateItemAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemAddonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateItemAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateItemAddon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateItemAddon(ctx, req.(*UpdateItemAddonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateRestaurantMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRestaurantMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateRestaurantMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateRestaurantMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateRestaurantMenu(ctx, req.(*UpdateRestaurantMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateMenuItem(ctx, req.(*UpdateMenuItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateRetailCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRetailCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateRetailCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateRetailCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateRetailCategory(ctx, req.(*UpdateRetailCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateRetailItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRetailItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateRetailItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateRetailItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateRetailItem(ctx, req.(*UpdateRetailItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateMedicineCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMedicineCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateMedicineCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateMedicineCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateMedicineCategory(ctx, req.(*UpdateMedicineCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateMedicineItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMedicineItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateMedicineItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateMedicineItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateMedicineItem(ctx, req.(*UpdateMedicineItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteItemVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemVariantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteItemVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteItemVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteItemVariant(ctx, req.(*DeleteItemVariantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteItemAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemAddonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteItemAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteItemAddon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteItemAddon(ctx, req.(*DeleteItemAddonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteRestaurantMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRestaurantMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteRestaurantMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteRestaurantMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteRestaurantMenu(ctx, req.(*DeleteRestaurantMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMenuItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteMenuItem(ctx, req.(*DeleteMenuItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteRetailCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRetailCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteRetailCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteRetailCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteRetailCategory(ctx, req.(*DeleteRetailCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteRetailItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRetailItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteRetailItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteRetailItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteRetailItem(ctx, req.(*DeleteRetailItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteMedicineCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMedicineCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteMedicineCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteMedicineCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteMedicineCategory(ctx, req.(*DeleteMedicineCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteMedicineItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMedicineItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteMedicineItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteMedicineItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteMedicineItem(ctx, req.(*DeleteMedicineItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItemVariant",
			Handler:    _ProductService_CreateItemVariant_Handler,
		},
		{
			MethodName: "CreateItemAddon",
			Handler:    _ProductService_CreateItemAddon_Handler,
		},
		{
			MethodName: "CreateRestaurantMenu",
			Handler:    _ProductService_CreateRestaurantMenu_Handler,
		},
		{
			MethodName: "CreateMenuItem",
			Handler:    _ProductService_CreateMenuItem_Handler,
		},
		{
			MethodName: "CreateRetailCategory",
			Handler:    _ProductService_CreateRetailCategory_Handler,
		},
		{
			MethodName: "CreateRetailItem",
			Handler:    _ProductService_CreateRetailItem_Handler,
		},
		{
			MethodName: "CreateMedicineCategory",
			Handler:    _ProductService_CreateMedicineCategory_Handler,
		},
		{
			MethodName: "CreateMedicineItem",
			Handler:    _ProductService_CreateMedicineItem_Handler,
		},
		{
			MethodName: "GetItemVariant",
			Handler:    _ProductService_GetItemVariant_Handler,
		},
		{
			MethodName: "GetItemAddon",
			Handler:    _ProductService_GetItemAddon_Handler,
		},
		{
			MethodName: "GetRestaurantMenu",
			Handler:    _ProductService_GetRestaurantMenu_Handler,
		},
		{
			MethodName: "GetMenuItem",
			Handler:    _ProductService_GetMenuItem_Handler,
		},
		{
			MethodName: "GetRetailCategory",
			Handler:    _ProductService_GetRetailCategory_Handler,
		},
		{
			MethodName: "GetRetailItem",
			Handler:    _ProductService_GetRetailItem_Handler,
		},
		{
			MethodName: "GetMedicineCategory",
			Handler:    _ProductService_GetMedicineCategory_Handler,
		},
		{
			MethodName: "GetMedicineItem",
			Handler:    _ProductService_GetMedicineItem_Handler,
		},
		{
			MethodName: "ListItemVariant",
			Handler:    _ProductService_ListItemVariant_Handler,
		},
		{
			MethodName: "ListItemAddon",
			Handler:    _ProductService_ListItemAddon_Handler,
		},
		{
			MethodName: "ListRestaurantMenu",
			Handler:    _ProductService_ListRestaurantMenu_Handler,
		},
		{
			MethodName: "ListMenuItem",
			Handler:    _ProductService_ListMenuItem_Handler,
		},
		{
			MethodName: "ListRetailCategory",
			Handler:    _ProductService_ListRetailCategory_Handler,
		},
		{
			MethodName: "ListRetailItem",
			Handler:    _ProductService_ListRetailItem_Handler,
		},
		{
			MethodName: "ListMedicineCategory",
			Handler:    _ProductService_ListMedicineCategory_Handler,
		},
		{
			MethodName: "ListMedicineItem",
			Handler:    _ProductService_ListMedicineItem_Handler,
		},
		{
			MethodName: "UpdateItemVariant",
			Handler:    _ProductService_UpdateItemVariant_Handler,
		},
		{
			MethodName: "UpdateItemAddon",
			Handler:    _ProductService_UpdateItemAddon_Handler,
		},
		{
			MethodName: "UpdateRestaurantMenu",
			Handler:    _ProductService_UpdateRestaurantMenu_Handler,
		},
		{
			MethodName: "UpdateMenuItem",
			Handler:    _ProductService_UpdateMenuItem_Handler,
		},
		{
			MethodName: "UpdateRetailCategory",
			Handler:    _ProductService_UpdateRetailCategory_Handler,
		},
		{
			MethodName: "UpdateRetailItem",
			Handler:    _ProductService_UpdateRetailItem_Handler,
		},
		{
			MethodName: "UpdateMedicineCategory",
			Handler:    _ProductService_UpdateMedicineCategory_Handler,
		},
		{
			MethodName: "UpdateMedicineItem",
			Handler:    _ProductService_UpdateMedicineItem_Handler,
		},
		{
			MethodName: "DeleteItemVariant",
			Handler:    _ProductService_DeleteItemVariant_Handler,
		},
		{
			MethodName: "DeleteItemAddon",
			Handler:    _ProductService_DeleteItemAddon_Handler,
		},
		{
			MethodName: "DeleteRestaurantMenu",
			Handler:    _ProductService_DeleteRestaurantMenu_Handler,
		},
		{
			MethodName: "DeleteMenuItem",
			Handler:    _ProductService_DeleteMenuItem_Handler,
		},
		{
			MethodName: "DeleteRetailCategory",
			Handler:    _ProductService_DeleteRetailCategory_Handler,
		},
		{
			MethodName: "DeleteRetailItem",
			Handler:    _ProductService_DeleteRetailItem_Handler,
		},
		{
			MethodName: "DeleteMedicineCategory",
			Handler:    _ProductService_DeleteMedicineCategory_Handler,
		},
		{
			MethodName: "DeleteMedicineItem",
			Handler:    _ProductService_DeleteMedicineItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
