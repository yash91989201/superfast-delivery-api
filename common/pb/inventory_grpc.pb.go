// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: inventory.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventoryService_CreateItemStock_FullMethodName    = "/pb.InventoryService/CreateItemStock"
	InventoryService_CreateVariantStock_FullMethodName = "/pb.InventoryService/CreateVariantStock"
	InventoryService_CreateAddonStock_FullMethodName   = "/pb.InventoryService/CreateAddonStock"
)

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryServiceClient interface {
	CreateItemStock(ctx context.Context, in *CreateItemStockReq, opts ...grpc.CallOption) (*ItemStock, error)
	CreateVariantStock(ctx context.Context, in *CreateVariantStockReq, opts ...grpc.CallOption) (*VariantStock, error)
	CreateAddonStock(ctx context.Context, in *CreateAddonStockReq, opts ...grpc.CallOption) (*AddonStock, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) CreateItemStock(ctx context.Context, in *CreateItemStockReq, opts ...grpc.CallOption) (*ItemStock, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemStock)
	err := c.cc.Invoke(ctx, InventoryService_CreateItemStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateVariantStock(ctx context.Context, in *CreateVariantStockReq, opts ...grpc.CallOption) (*VariantStock, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VariantStock)
	err := c.cc.Invoke(ctx, InventoryService_CreateVariantStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateAddonStock(ctx context.Context, in *CreateAddonStockReq, opts ...grpc.CallOption) (*AddonStock, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddonStock)
	err := c.cc.Invoke(ctx, InventoryService_CreateAddonStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations must embed UnimplementedInventoryServiceServer
// for forward compatibility.
type InventoryServiceServer interface {
	CreateItemStock(context.Context, *CreateItemStockReq) (*ItemStock, error)
	CreateVariantStock(context.Context, *CreateVariantStockReq) (*VariantStock, error)
	CreateAddonStock(context.Context, *CreateAddonStockReq) (*AddonStock, error)
	mustEmbedUnimplementedInventoryServiceServer()
}

// UnimplementedInventoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServiceServer struct{}

func (UnimplementedInventoryServiceServer) CreateItemStock(context.Context, *CreateItemStockReq) (*ItemStock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemStock not implemented")
}
func (UnimplementedInventoryServiceServer) CreateVariantStock(context.Context, *CreateVariantStockReq) (*VariantStock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVariantStock not implemented")
}
func (UnimplementedInventoryServiceServer) CreateAddonStock(context.Context, *CreateAddonStockReq) (*AddonStock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddonStock not implemented")
}
func (UnimplementedInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {}
func (UnimplementedInventoryServiceServer) testEmbeddedByValue()                          {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_CreateItemStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateItemStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateItemStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateItemStock(ctx, req.(*CreateItemStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateVariantStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVariantStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateVariantStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateVariantStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateVariantStock(ctx, req.(*CreateVariantStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateAddonStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddonStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateAddonStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateAddonStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateAddonStock(ctx, req.(*CreateAddonStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItemStock",
			Handler:    _InventoryService_CreateItemStock_Handler,
		},
		{
			MethodName: "CreateVariantStock",
			Handler:    _InventoryService_CreateVariantStock_Handler,
		},
		{
			MethodName: "CreateAddonStock",
			Handler:    _InventoryService_CreateAddonStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory.proto",
}
