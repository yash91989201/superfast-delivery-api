// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: geolocation.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReverseGeocodeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Latitude      float64                `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     float64                `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	AddressId     string                 `protobuf:"bytes,3,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReverseGeocodeReq) Reset() {
	*x = ReverseGeocodeReq{}
	mi := &file_geolocation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReverseGeocodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseGeocodeReq) ProtoMessage() {}

func (x *ReverseGeocodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_geolocation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseGeocodeReq.ProtoReflect.Descriptor instead.
func (*ReverseGeocodeReq) Descriptor() ([]byte, []int) {
	return file_geolocation_proto_rawDescGZIP(), []int{0}
}

func (x *ReverseGeocodeReq) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *ReverseGeocodeReq) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *ReverseGeocodeReq) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

type AddressDetail struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Route            string                 `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	Town             string                 `protobuf:"bytes,3,opt,name=town,proto3" json:"town,omitempty"`
	PostalCode       string                 `protobuf:"bytes,4,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	District         string                 `protobuf:"bytes,5,opt,name=district,proto3" json:"district,omitempty"`
	State            string                 `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Country          string                 `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
	PlusCode         string                 `protobuf:"bytes,8,opt,name=plus_code,json=plusCode,proto3" json:"plus_code,omitempty"`
	PlaceId          string                 `protobuf:"bytes,9,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	FormattedAddress string                 `protobuf:"bytes,10,opt,name=formatted_address,json=formattedAddress,proto3" json:"formatted_address,omitempty"`
	Latitude         float64                `protobuf:"fixed64,11,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude        float64                `protobuf:"fixed64,12,opt,name=longitude,proto3" json:"longitude,omitempty"`
	AddressId        string                 `protobuf:"bytes,13,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AddressDetail) Reset() {
	*x = AddressDetail{}
	mi := &file_geolocation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddressDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressDetail) ProtoMessage() {}

func (x *AddressDetail) ProtoReflect() protoreflect.Message {
	mi := &file_geolocation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressDetail.ProtoReflect.Descriptor instead.
func (*AddressDetail) Descriptor() ([]byte, []int) {
	return file_geolocation_proto_rawDescGZIP(), []int{1}
}

func (x *AddressDetail) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddressDetail) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

func (x *AddressDetail) GetTown() string {
	if x != nil {
		return x.Town
	}
	return ""
}

func (x *AddressDetail) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *AddressDetail) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *AddressDetail) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *AddressDetail) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *AddressDetail) GetPlusCode() string {
	if x != nil {
		return x.PlusCode
	}
	return ""
}

func (x *AddressDetail) GetPlaceId() string {
	if x != nil {
		return x.PlaceId
	}
	return ""
}

func (x *AddressDetail) GetFormattedAddress() string {
	if x != nil {
		return x.FormattedAddress
	}
	return ""
}

func (x *AddressDetail) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *AddressDetail) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *AddressDetail) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

var File_geolocation_proto protoreflect.FileDescriptor

var file_geolocation_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x6c, 0x0a, 0x11, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x47, 0x65, 0x6f, 0x63, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0xf4,
	0x02, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x77, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x77, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x32, 0x62, 0x0a, 0x12, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x47, 0x65, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x2e,
	0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x47, 0x65, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x73, 0x68, 0x39, 0x31, 0x39, 0x38,
	0x39, 0x32, 0x30, 0x31, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x66, 0x61, 0x73, 0x74, 0x2d, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_geolocation_proto_rawDescOnce sync.Once
	file_geolocation_proto_rawDescData []byte
)

func file_geolocation_proto_rawDescGZIP() []byte {
	file_geolocation_proto_rawDescOnce.Do(func() {
		file_geolocation_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_geolocation_proto_rawDesc), len(file_geolocation_proto_rawDesc)))
	})
	return file_geolocation_proto_rawDescData
}

var file_geolocation_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_geolocation_proto_goTypes = []any{
	(*ReverseGeocodeReq)(nil), // 0: geolocation.ReverseGeocodeReq
	(*AddressDetail)(nil),     // 1: geolocation.AddressDetail
}
var file_geolocation_proto_depIdxs = []int32{
	0, // 0: geolocation.GeolocationService.ReverseGeocode:input_type -> geolocation.ReverseGeocodeReq
	1, // 1: geolocation.GeolocationService.ReverseGeocode:output_type -> geolocation.AddressDetail
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_geolocation_proto_init() }
func file_geolocation_proto_init() {
	if File_geolocation_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_geolocation_proto_rawDesc), len(file_geolocation_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_geolocation_proto_goTypes,
		DependencyIndexes: file_geolocation_proto_depIdxs,
		MessageInfos:      file_geolocation_proto_msgTypes,
	}.Build()
	File_geolocation_proto = out.File
	file_geolocation_proto_goTypes = nil
	file_geolocation_proto_depIdxs = nil
}
