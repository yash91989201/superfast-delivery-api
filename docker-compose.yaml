name: superfast_delivery_api

services:
  rest_gateway:
    build:
      context: .
      dockerfile: ./gateways/rest/Dockerfile
    container_name: rest_gateway
    environment:
      PORT: ${PORT}
    ports:
      - "${PORT}:${PORT}"
    networks:
      - superfast_delivery
    mem_limit: 128m
    cpus: 1
    restart: on-failure
    depends_on:
      - authentication_service
      - user_service
      - shop_service
      - product_service
      - inventory_service

  graphql_gateway:
    build:
      context: .
      dockerfile: ./gateways/graphql/Dockerfile
    container_name: graphql_gateway
    environment:
      PORT: ${GRAPHQL_PORT}
      AUTHENTICATION_SERVICE_URL: ${AUTHENTICATION_SERVICE_URL}
      USER_SERVICE_URL: ${USER_SERVICE_URL}
      SHOP_SERVICE_URL: ${SHOP_SERVICE_URL}
      PRODUCT_SERVICE_URL: ${PRODUCT_SERVICE_URL}
      INVENTORY_SERVICE_URL: ${INVENTORY_SERVICE_URL}
    ports:
      - "${GRAPHQL_PORT}:${GRAPHQL_PORT}"
    networks:
      - superfast_delivery
    mem_limit: 128m
    cpus: 1
    depends_on:
      - authentication_service
      - user_service
      - shop_service
      - product_service
    restart: on-failure

  authentication_service:
    build:
      context: .
      dockerfile: ./services/authentication/Dockerfile
    container_name: authentication_service
    environment:
      DATABASE_URL: ${AUTHENTICATION_DATABASE_URL}
      SERVICE_URL: ${AUTHENTICATION_SERVICE_URL}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    networks:
      - superfast_delivery
    mem_limit: 128m
    cpus: 1
    depends_on:
      - authentication_db
    restart: on-failure:8

  authentication_db:
    image: mysql:9.1.0
    container_name: authentication_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${AUTHENTICATION_DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${AUTHENTICATION_DB_NAME}
      MYSQL_USER: ${AUTHENTICATION_DB_USER}
      MYSQL_PASSWORD: ${AUTHENTICATION_DB_PASSWORD}
    mem_limit: 750m
    cpus: 1
    networks:
      - superfast_delivery
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mysqladmin --user=root --password=${AUTHENTICATION_DB_ROOT_PASSWORD} --host=localhost --port=3306 ping",
        ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  authentication_db_migrator:
    image: migrate/migrate
    volumes:
      - ./services/authentication/db/migrations:/migrations
    working_dir: /migrations
    command:
      [
        "-database",
        "mysql://${AUTHENTICATION_DB_USER}:${AUTHENTICATION_DB_PASSWORD}@tcp(${AUTHENTICATION_DB_HOST}:${AUTHENTICATION_DB_PORT})/${AUTHENTICATION_DB_NAME}",
        "-path",
        "/migrations",
        "up",
      ]
    container_name: authentication_db_migrator
    depends_on:
      authentication_db:
        condition: service_healthy
    restart: on-failure:8
    mem_limit: 64m
    cpus: 0.25
    networks:
      - superfast_delivery

  user_service:
    build:
      context: .
      dockerfile: ./services/user/Dockerfile
    container_name: user_service
    environment:
      DATABASE_URL: ${USER_DATABASE_URL}
      SERVICE_URL: ${USER_SERVICE_URL}
    networks:
      - superfast_delivery
    mem_limit: 128m
    cpus: 1
    depends_on:
      - user_db
    restart: on-failure:8

  user_db:
    image: mysql:9.1.0
    container_name: user_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${USER_DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${USER_DB_NAME}
      MYSQL_USER: ${USER_DB_USER}
      MYSQL_PASSWORD: ${USER_DB_PASSWORD}
    mem_limit: 750m
    cpus: 1
    networks:
      - superfast_delivery
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mysqladmin --user=root --password=${USER_DB_ROOT_PASSWORD} --host=localhost --port=3306 ping",
        ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  user_db_migrator:
    image: migrate/migrate
    volumes:
      - ./services/user/db/migrations:/migrations
    working_dir: /migrations
    command:
      [
        "-database",
        "mysql://root:${USER_DB_ROOT_PASSWORD}@tcp(${USER_DB_HOST}:${USER_DB_PORT})/${USER_DB_NAME}",
        "-path",
        "/migrations",
        "up",
      ]
    container_name: user_db_migrator
    depends_on:
      user_db:
        condition: service_healthy
    restart: on-failure
    mem_limit: 64m
    cpus: 0.25
    networks:
      - superfast_delivery

  shop_service:
    build:
      context: .
      dockerfile: ./services/shop/Dockerfile
    container_name: shop_service
    environment:
      DATABASE_URL: ${SHOP_DATABASE_URL}
      SERVICE_URL: ${SHOP_SERVICE_URL}
    networks:
      - superfast_delivery
    mem_limit: 128m
    cpus: 1
    depends_on:
      - shop_db
    restart: on-failure:8

  shop_db:
    image: postgis/postgis:17-3.5
    container_name: shop_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${SHOP_DB_USER}
      POSTGRES_DB: ${SHOP_DB_NAME}
      POSTGRES_PASSWORD: ${SHOP_DB_PASSWORD}
    mem_limit: 128m
    cpus: 1
    networks:
      - superfast_delivery
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${SHOP_DB_USER} -d ${SHOP_DB_NAME} -h localhost -p 5432",
        ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  shop_db_migrator:
    image: migrate/migrate
    volumes:
      - ./services/shop/db/migrations:/migrations
    working_dir: /migrations
    command:
      [
        "-database",
        "postgres://${SHOP_DB_USER}:${SHOP_DB_PASSWORD}@${SHOP_DB_HOST}:${SHOP_DB_PORT}/${SHOP_DB_NAME}?sslmode=${SHOP_DB_SSL_MODE}",
        "-path",
        "/migrations",
        "up",
      ]
    container_name: shop_db_migrator
    depends_on:
      shop_db:
        condition: service_healthy
    restart: on-failure
    mem_limit: 64m
    cpus: 0.25
    networks:
      - superfast_delivery

  product_service:
    build:
      context: .
      dockerfile: ./services/product/Dockerfile
    container_name: product_service
    environment:
      DATABASE_URL: ${PRODUCT_DATABASE_URL}
      DATABASE_NAME: ${PRODUCT_DB_NAME}
      SERVICE_URL: ${PRODUCT_SERVICE_URL}
    networks:
      - superfast_delivery
    mem_limit: 128m
    cpus: 1
    depends_on:
      - product_db
    restart: on-failure:8

  product_db:
    image: mongo:8.0
    container_name: product_db
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: ${PRODUCT_DB_NAME}
      MONGO_INITDB_ROOT_USERNAME: ${PRODUCT_DB_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${PRODUCT_DB_ROOT_PASSWORD}
      MONGO_INITDB_USER: ${PRODUCT_DB_USER}
      MONGO_INITDB_PWD: ${PRODUCT_DB_PASSWORD}
    volumes:
      - ./services/product/db/init-db-user.js:/docker-entrypoint-initdb.d/init-db-user.js:RO
    mem_limit: 750m
    cpus: 1
    networks:
      - superfast_delivery
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'mongosh --username ${PRODUCT_DB_ROOT_USER} --password ${PRODUCT_DB_ROOT_PASSWORD} --eval ''db.adminCommand("ping")''',
        ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  inventory_service:
    build:
      context: .
      dockerfile: ./services/inventory/Dockerfile
    container_name: inventory_service
    environment:
      DATABASE_URL: ${INVENTORY_DATABASE_URL}
      SERVICE_URL: ${INVENTORY_SERVICE_URL}
    networks:
      - superfast_delivery
    mem_limit: 128m
    cpus: 1
    depends_on:
      - inventory_db
    restart: on-failure:8

  inventory_db:
    image: mysql:9.1.0
    container_name: inventory_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${INVENTORY_DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${INVENTORY_DB_NAME}
      MYSQL_USER: ${INVENTORY_DB_USER}
      MYSQL_PASSWORD: ${INVENTORY_DB_PASSWORD}
    mem_limit: 750m
    cpus: 1
    networks:
      - superfast_delivery
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mysqladmin --user=root --password=${INVENTORY_DB_ROOT_PASSWORD} --host=localhost --port=3306 ping",
        ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  inventory_db_migrator:
    image: migrate/migrate
    volumes:
      - ./services/inventory/db/migrations:/migrations
    working_dir: /migrations
    command:
      [
        "-database",
        "mysql://root:${INVENTORY_DB_ROOT_PASSWORD}@tcp(${INVENTORY_DB_HOST}:${INVENTORY_DB_PORT})/${INVENTORY_DB_NAME}",
        "-path",
        "/migrations",
        "up",
      ]
    container_name: inventory_db_migrator
    depends_on:
      inventory_db:
        condition: service_healthy
    restart: on-failure
    mem_limit: 64m
    cpus: 0.25
    networks:
      - superfast_delivery

networks:
  superfast_delivery:
    driver: bridge
    name: superfast_delivery_network
